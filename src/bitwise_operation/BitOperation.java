package bitwise_operation;

public class BitOperation {

    /**
     * & (логическое умножение)
     * Умножение производится поразрядно, и если у обоих операндов значения разрядов равно 1, то операция возвращает 1, иначе возвращается число 0.
     */
    int x1 = 2; //010
    int x2 = 5; //101
    int res = x1 & x2; //0

    int y1 = 4; //100
    int y2 = 5; //101
    int res2 = x1 & x2; //100 (4)


    /**
     * | (логическое сложение)
     * Данная операция также производится по двоичным разрядам, но теперь возвращается единица, если хотя бы у одного
     * числа в данном разряде имеется единица (операция "логическое ИЛИ").
     */
    int a1 = 2; //010
    int a2 = 5; //101
    int res3 = a1 | a2; //111 (7)


    /**
     * ^ (логическое исключающее ИЛИ)
     * Также эту операцию называют XOR
     * Если у нас значения текущего разряда у обоих чисел разные, то возвращается 1, иначе возвращается 0.
     */

    int b1 = 5; //101
    int b2 = 4; //100
    int res4 = b1 ^ b2; // 001 (1)

    /**
     * ~ (логическое отрицание)
     * Поразрядная операция, которая инвертирует все разряды числа: если значение разряда равно 1, то оно становится равным нулю, и наоборот.
     */
    byte a = 12; //       0000 1100
    byte b = (byte) ~a; //1111 0011 (-13)






    public static void main(String[] args) {
        BitOperation bitOperation = new BitOperation();
        System.out.println(bitOperation.res4);
        System.out.println(Integer.toBinaryString(bitOperation.res4));

        System.out.println(bitOperation.b);
    }
}
